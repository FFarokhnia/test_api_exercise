# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

import os
from urllib.parse import urlparse
from applitools.selenium import (Eyes, Target, Configuration)

class TestLogin():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
    config = Configuration()
    self.eyes = Eyes()
    self.eyes.api_key = os.environ["APPLITOOLS_API_KEY"]
    self.eyes.open(self.driver, "test_the_internet", "login")
  
  def teardown_method(self, method):
    self.driver.quit()
    self.eyes.abort()
  
  def login(self):
    self.driver.get("https://the-internet.herokuapp.com//")
    self.driver.set_window_size(1396, 803)
    self.driver.find_element(By.LINK_TEXT, "Form Authentication").click()
    self.driver.find_element(By.ID, "username").click()
    self.driver.find_element(By.ID, "username").send_keys(self.vars["username"])
    self.driver.find_element(By.ID, "password").click()
    self.driver.find_element(By.ID, "password").send_keys(self.vars["password"])
    self.driver.find_element(By.CSS_SELECTOR, ".radius").click()
  
  def test_logininvalid(self):
    # Test name: login invalid
    # Step # | name | target | value
    # 1 | store | blah | username
    self.vars["username"] = "blah"
    # 2 | store | blah | password
    self.vars["password"] = "blah"
    # 3 | run | login | 
    self.login()
    # 4 | assertText | id=flash | Your username is invalid!\n×
    assert self.driver.find_element(By.ID, "flash").text == "Your username is invalid!\\\\n×"
    self.eyes.close()
  
  def test_loginvalid(self):
    # Test name: login valid
    # Step # | name | target | value
    # 1 | store | tomsmith | username
    self.vars["username"] = "tomsmith"
    # 2 | store | SuperSecretPassword! | password
    self.vars["password"] = "SuperSecretPassword!"
    # 3 | run | login | 
    self.login()
    # 4 | assertText | id=flash | You logged into a secure area!\n×
    assert self.driver.find_element(By.ID, "flash").text == "You logged into a secure area!\\\\n×"
    self.eyes.close()
  
